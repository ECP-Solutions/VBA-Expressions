<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="VBAexpressionsScope" script:language="StarBasic">Option Explicit
option Compatible
Option VBASupport 1 
option ClassModule
Option Base 0
&apos;#
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; Copyright © 2024-2025 W. García
&apos; GPL-3.0 license | https://www.gnu.org/licenses/gpl-3.0.html/
&apos; https://github.com/ws-garcia
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;#
&apos; INFO:
&apos; Class module developed to define constants and variable scopes for expressions, so that several expressions
&apos; can share the same variables without the need to redefine each of them.
&apos;
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;#
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; VARIABLES:
Private e As Double
Private pi As Double
Private P_CONSTANTS As ClusterBuffer
Private P_EXPR_VARIABLES As ClusterBuffer
Private arrHelper As Object
Private strVBA As New VBAstrHelper
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;#
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;TYPES:
Type ClusterBuffer
    Capacity As Long
    aindex As Long
    Storage As Variant &apos;() As ClusterItem
End Type &apos; ClusterBuffer
Type ClusterItem
    aindex As Long
    aName As String
    value As String
    Assigned As Boolean
    value2 As Variant &apos;Array representation for the value
    IsArray As Boolean
End Type &apos; ClusterBuffer
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;#
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; PROPERTIES:

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Returns True if the given variable has an array assigned
&apos;&apos;&apos; &lt;/summary&gt;
&apos;Public Property Get AssignedArray(aVarKey As Variant) As Boolean
Public Function GetAssignedArray(aVarKey As Variant) As Boolean
    If Not IsNumeric(aVarKey) Then
        Dim ValueIdx As Long
    
        ValueIdx = GetCBItemIdx(P_EXPR_VARIABLES, CStr(aVarKey))
        If ValueIdx &gt; -1 Then
            GetAssignedArray = P_EXPR_VARIABLES.Storage(ValueIdx).IsArray
        End If
    Else
        GetAssignedArray = P_EXPR_VARIABLES.Storage(CLng(aVarKey)).IsArray
    End If
End Function

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Gets the constants collection. By default this is pre-populated with PI and e.
&apos;&apos;&apos; &lt;/summary&gt;
Public Property Get Constants() As Collection
    Dim i As Long
    
    Set Constants = New Collection
    For i = 0 To P_CONSTANTS.aindex
        Constants.Add (P_CONSTANTS.Storage(i).value, P_CONSTANTS.Storage(i).aName)
    Next i
End Property

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Gets a string with the variables values used for the last evaluation.
&apos;&apos;&apos; &lt;/summary&gt;
Public Property Get CurrentVarValues() As String
    Dim i As Long
    Dim tmpResult As String
    
    For i = 0 To P_EXPR_VARIABLES.aindex
        If tmpResult = vbNullString Then
            tmpResult = P_EXPR_VARIABLES.Storage(i).aName &amp; &quot; = &quot; &amp; _
                        P_EXPR_VARIABLES.Storage(i).value
        Else
            tmpResult = tmpResult &amp; &quot;; &quot; &amp; P_EXPR_VARIABLES.Storage(i).aName &amp; &quot; = &quot; &amp; _
                        P_EXPR_VARIABLES.Storage(i).value
        End If
    Next i
    CurrentVarValues = tmpResult
End Property

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Gets a string with the variables values used for the last evaluation.
&apos;&apos;&apos; &lt;/summary&gt;
Public Property Get CurrentVariables() As String
    Dim i As Long
    Dim tmpResult As String
    
    For i = 0 To P_EXPR_VARIABLES.aindex
        If tmpResult = vbNullString Then
            tmpResult = P_EXPR_VARIABLES.Storage(i).aName
        Else
            tmpResult = tmpResult &amp; &quot;; &quot; &amp; P_EXPR_VARIABLES.Storage(i).aName
        End If
    Next i
    CurrentVariables = tmpResult
End Property

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Returns &apos;True&apos; if all stored variables have a value or when there
&apos;&apos;&apos; are no stored variables, &apos;False&apos; when the value of any variable is missing.
&apos;&apos;&apos; &lt;/summary&gt;
Public Function DefinedScope() As Boolean
    If P_EXPR_VARIABLES.aindex &gt; -1 Then
        Dim i As Long
        Dim cviCounter As Long
        
        For i = 0 To P_EXPR_VARIABLES.aindex
            If P_EXPR_VARIABLES.Storage(i).Assigned Then
                cviCounter = cviCounter + 1
            End If
        Next i
        DefinedScope = (cviCounter = P_EXPR_VARIABLES.aindex + 1)
    Else
        DefinedScope = True
    End If
End Function

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Gets the count of stored variable.
&apos;&apos;&apos; &lt;/summary&gt;
Public Property Get VariablesCount() As Long
    VariablesCount = P_EXPR_VARIABLES.aindex + 1
End Property

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Gets or sets the current value from/to the given variable.
&apos;&apos;&apos; If &apos;aVarKey&apos; is numeric, the argument is treated as an index.
&apos;&apos;&apos; &lt;/summary&gt;
&apos;Public Property Get VarValue(aVarKey As Variant) As String
Public Function GetVarValue(aVarKey As Variant) As String
    If Not IsNumeric(aVarKey) Then
        Dim ValueIdx As Long
    
        ValueIdx = GetCBItemIdx(P_EXPR_VARIABLES, CStr(aVarKey))
        If ValueIdx &gt; -1 Then
            GetVarValue = P_EXPR_VARIABLES.Storage(ValueIdx).value
        End If
    Else
        GetVarValue = P_EXPR_VARIABLES.Storage(CLng(aVarKey)).value
    End If
End Function

&apos;Public Property Let VarValue(aVarKey As Variant, aVarValue As String)
Public Sub LetVarValue(aVarKey As Variant, aVarValue As String)
    Dim ValueIdx As Long
    Dim ConstKey As String
    If Not IsNumeric(aVarKey) Then  
        ValueIdx = GetCBItemIdx(P_EXPR_VARIABLES, CStr(aVarKey))
        If ValueIdx &gt; -1 Then
            P_EXPR_VARIABLES.Storage(ValueIdx).value = aVarValue
            P_EXPR_VARIABLES.Storage(ValueIdx).Assigned = True
        Else
            AddVariable CStr(aVarKey), ConstKey
            Me.LetVarValue(aVarKey,aVarValue)
        End If
    Else
        ValueIdx = CLng(aVarKey)
        If ValueIdx &gt; -1 And ValueIdx &lt;= P_EXPR_VARIABLES.aindex Then
            P_EXPR_VARIABLES.Storage(ValueIdx).value = aVarValue
            P_EXPR_VARIABLES.Storage(ValueIdx).Assigned = True
        End If
    End If
End Sub

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Gets the current value from an instance for the given variable.
&apos;&apos;&apos; If &apos;aVarKey&apos; is numeric, the argument is treated as an index.
&apos;&apos;&apos;
&apos;&apos;&apos; NOTE: this version use Variant data type to handle arrays.
&apos;&apos;&apos; The string array representation is retrieved as usual if the
&apos;&apos;&apos; parameter &quot;treatAsArray&quot; is set to False, an array is returned
&apos;&apos;&apos; otherwise.
&apos;&apos;&apos; &lt;/summary&gt;
&apos;Public Property Get VarValue2(aVarKey As Variant, treatAsArray As Boolean) As Variant
Public Function GetVarValue2(aVarKey As Variant, treatAsArray As Boolean) As Variant
    If Not IsNumeric(aVarKey) Then
        Dim ValueIdx As Long
    
        ValueIdx = GetCBItemIdx(P_EXPR_VARIABLES, CStr(aVarKey))
        If ValueIdx &gt; -1 Then
            If treatAsArray Then
                If P_EXPR_VARIABLES.Storage(ValueIdx).IsArray Then
                    GetVarValue2 = P_EXPR_VARIABLES.Storage(ValueIdx).value2
                End If
            Else
                GetVarValue2 = P_EXPR_VARIABLES.Storage(ValueIdx).value
            End If
        End If
    Else
        If treatAsArray Then
            If P_EXPR_VARIABLES.Storage(CLng(aVarKey)).IsArray Then
                GetVarValue2 = P_EXPR_VARIABLES.Storage(CLng(aVarKey)).value2
            End If
        Else
            GetVarValue2 = P_EXPR_VARIABLES.Storage(CLng(aVarKey)).value
        End If
    End If
End Function

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Gets or sets the current value from/to the given variable.
&apos;&apos;&apos; If &apos;aVarKey&apos; is numeric, the argument is treated as an index.
&apos;&apos;&apos;
&apos;&apos;&apos; NOTE: this version use variant data type to handle arrays.
&apos;&apos;&apos; The array string is stored as usual, but a conversion is
&apos;&apos;&apos; also perfomed to allocate an array created by parsing the
&apos;&apos;&apos; given string when the parameter &quot;treatAsArray&quot; is set to True.
&apos;&apos;&apos; &lt;/summary&gt;
&apos;Public Property Let VarValue2(aVarKey As Variant, treatAsArray As Boolean, aVarValue As Variant)
Public Sub LetVarValue2(aVarKey As Variant, treatAsArray As Boolean, aVarValue As Variant)
    If arrHelper Is Nothing Then Set arrHelper = New VBAexpressions
    If Not IsNumeric(aVarKey) Then
        Dim ValueIdx As Long
        Dim ConstKey As String
        
        ValueIdx = GetCBItemIdx(P_EXPR_VARIABLES, CStr(aVarKey))
        If ValueIdx &gt; -1 Then
            P_EXPR_VARIABLES.Storage(ValueIdx).IsArray = treatAsArray
            P_EXPR_VARIABLES.Storage(ValueIdx).value = aVarValue
            P_EXPR_VARIABLES.Storage(ValueIdx).Assigned = True
            If treatAsArray Then
                P_EXPR_VARIABLES.Storage(ValueIdx). _
                                    value2 = arrHelper.ArrayFromString(CStr(aVarValue))
            End If
        Else
            AddVariable CStr(aVarKey), ConstKey
            Me.LetVarValue2(aVarKey, treatAsArray, aVarValue)
        End If
    Else
        ValueIdx = CLng(aVarKey)
        If ValueIdx &gt; -1 And ValueIdx &lt;= P_EXPR_VARIABLES.aindex Then
            P_EXPR_VARIABLES.Storage(ValueIdx).IsArray = treatAsArray
            P_EXPR_VARIABLES.Storage(ValueIdx).value = aVarValue
            P_EXPR_VARIABLES.Storage(ValueIdx).Assigned = True
            If treatAsArray Then
                P_EXPR_VARIABLES.Storage(ValueIdx). _
                                    value2 = arrHelper.ArrayFromString(CStr(aVarValue))
            End If
        End If
    End If
End Sub

&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;#
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; METHODS:

Public Sub AddConstant(aValue As String, aKey As String)
    Dim ConstIdx As Long
    
    ConstIdx = GetCBItemIdx(P_CONSTANTS, aKey)
    If ConstIdx = -1 Then &apos;Ensure uniqueness
        AppendToCBbuffer P_CONSTANTS, aKey, aValue
    End If
End Sub

Public Sub AddVariable(ByRef variable As String, ByRef aKey As String)
    Dim varIdx As Long
    
    aKey = Cast(variable)
    varIdx = GetCBItemIdx(P_EXPR_VARIABLES, aKey)
    If varIdx = -1 Then &apos;Ensure uniqueness
        AppendToCBbuffer P_EXPR_VARIABLES, aKey
        varIdx = GetCBItemIdx(P_CONSTANTS, aKey)
        If varIdx &gt; -1 Then &apos;Assign the value from constants
            P_EXPR_VARIABLES.Storage(P_EXPR_VARIABLES.aindex).value = P_CONSTANTS.Storage(varIdx).value
            P_EXPR_VARIABLES.Storage(P_EXPR_VARIABLES.aindex).Assigned = True
        End If
    End If
End Sub

Private Sub AppendToCBbuffer(ByRef aBuffer As ClusterBuffer, ByRef ItemName As String, Optional ByRef ItemValue As String = vbNullString)
	aBuffer.aindex = aBuffer.aindex + 1
    If aBuffer.aindex = aBuffer.Capacity Then ExpandBuffer(aBuffer)
    aBuffer.Storage(aBuffer.aindex).aindex = aBuffer.aindex
    aBuffer.Storage(aBuffer.aindex).Assigned = (ItemValue &lt;&gt; vbNullString)
    aBuffer.Storage(aBuffer.aindex).aName = ItemName
    aBuffer.Storage(aBuffer.aindex).value = ItemValue
End Sub

Private Function Cast(ByRef expression As String) As String
    If IsPI(expression) Then
        Cast = LCase$(expression)     &apos;Case insensitive for PI
    Else
        Cast = expression
    End If
End Function

Public Sub ConstantsInit()
    InitCBbuffer P_CONSTANTS
    &apos;@--------------------------------------------------------------------
    &apos; Save predefined constants
    AppendToCBbuffer P_CONSTANTS, &quot;pi&quot;, CStr(pi)
    AppendToCBbuffer P_CONSTANTS, &quot;e&quot;, CStr(e)
End Sub

Public Function CopyScope(ByRef sourceScope As Object) As Object
    Dim i As Long
    Dim tmpValue As String
    Dim tmpIdx As Long
    
	If TypeName(sourceScope)=TypeName(me) Then
        For i = 0 To P_EXPR_VARIABLES.aindex
            tmpIdx = sourceScope.VarIndex(P_EXPR_VARIABLES.Storage(i).aName)
            If tmpIdx &gt; -1 Then
                 tmpValue = sourceScope.GetVarValue(tmpIdx)
                If tmpValue &lt;&gt; vbNullString Then
                     me.LetVarValue(i, tmpValue)
                End If
            End If
        Next
        Set CopyScope = Me
	End If
End Function
Private Sub ExpandCBbuffer(ByRef aBuffer As ClusterBuffer)
	Dim tmpBuffer() As ClusterItem
	
	aBuffer.Capacity = 2 * (aBuffer.Capacity + 1)
	tmpBuffer = aBuffer.Storage
    ReDim Preserve tmpBuffer(0 To aBuffer.Capacity - 1)
    aBuffer.Storage = tmpBuffer
End Sub

Public Sub FillPredefinedVars()
    Dim i As Long
    Dim tmpIdx As Long
    
    For i = 0 To P_EXPR_VARIABLES.aindex
        tmpIdx = GetCBItemIdx(P_CONSTANTS, P_EXPR_VARIABLES.Storage(i).aName)
        If tmpIdx &gt; -1 Then &apos;The variable is a defined constant
            P_EXPR_VARIABLES.Storage(i).value = P_CONSTANTS.Storage(tmpIdx).value
            P_EXPR_VARIABLES.Storage(i).Assigned = True
        End If
    Next i
End Sub
Private Function GetCBItemIdx(ByRef cbBuffer As ClusterBuffer, ByRef ItemName As String) As Long
    Dim i As Long
    Dim tmpResult As Boolean
    Dim tmpItemName As String
    
    If strVBA.LenB2(ItemName) Then
        Select Case AscW(ItemName)
            Case 43, 45 &apos;Unary expression
                tmpItemName = strVBA.MidB(ItemName, 3)
            Case Else
                tmpItemName = ItemName
        End Select
        If cbBuffer.aindex &gt; -1 Then
            i = 0
            Do
                tmpResult = (cbBuffer.Storage(i).aName = tmpItemName)
                i = i + 1
            Loop While i &lt;= cbBuffer.aindex And Not tmpResult
        End If
        If tmpResult Then
            GetCBItemIdx = i - 1
        Else
            GetCBItemIdx = -1
        End If
    Else
        GetCBItemIdx = -1
    End If
End Function

Private Sub InitCBbuffer(ByRef aBuffer As ClusterBuffer)
    Dim tmpBuffer() As ClusterItem
	
	aBuffer.Capacity = 128
	ReDim tmpBuffer(0 To aBuffer.Capacity - 1)
	Set aBuffer.Storage = tmpBuffer
	aBuffer.aindex = -1
End Sub

Public Function IsConstant(aVarName As String) As Boolean
    IsConstant = GetCBItemIdx(P_CONSTANTS, aVarName) &gt; -1
End Function

Private Function IsPI(ByRef varName As String) As Boolean
    IsPI = (varName Like &quot;[Pp][Ii]&quot;)
End Function

Public Sub VariablesInit()
    InitCBbuffer P_EXPR_VARIABLES
End Sub

&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Returns the index of a given variable or constant named &apos;ItemName&apos;
&apos;&apos;&apos; &lt;/summary&gt;
Public Function VarIndex(ByRef ItemName As String, _
                            Optional findConstant As Boolean = False) As Long
    If Not findConstant Then
        VarIndex = GetCBItemIdx(P_EXPR_VARIABLES, ItemName)
    Else
        VarIndex = GetCBItemIdx(P_CONSTANTS, ItemName)
    End If
End Function
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;#
&apos;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;&apos;&apos; &lt;summary&gt;
&apos;&apos;&apos; Initializes this instance.
&apos;&apos;&apos; &lt;/summary&gt;
Private Sub Class_Initialize()
    pi = 4 * Atn(1)
    e = Exp(1)
    ConstantsInit
    VariablesInit
End Sub
</script:module>